package collection_framework;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class Ex {

	public static void main(String[] args) {
		/*
		 * 자료 구조를 자바에서 구현해 제공하는 클래스들의 모음 (API)
		 * 
		 * 							Collection(I)
		 * 			List(I)									Set(I)		|		Map(I)
		 * 			ArrayList(C)							HashSet(C)	|		HashMap(C)
		 * 
		 * 모든 데이터는 객체 형태로 관리된다.
		 * 기본 데이터 타입을 사용할 경우 Wrapper 클래스 타입으로 오토 박싱됨.
		 * 
		 * 1. Set 계열
		 * : 저장, 순서 개념이 없다. 중복이 허용되지 않는다
		 *   => 매우 효율적인 중복 제거 수단
		 *   인덱스가 없다
		 *   구현체 클래스 : HashSet, TreeSet ...
		 * 
		 */
		// HashSet 객체
		Set<Object> set = new HashSet<Object>();
		// 업캐스팅한 형태로 많이 사용한다
		
		// Set.isEmpty() : boolean
		// => 컬렉션 객체가 비어있는지 판별
		System.out.println("set 객체가 비어있는가 ? : " + set.isEmpty());
		
		// Set.size() : int
		// => 컬렉션 객체에 저장된 요소 개수 리턴
		System.out.println("set 객체에 저장된 요소 갯수 : " + set.size());
		
		// .add(Object o) : boolean
		// => 객체에 저장하고 성공 여부 리턴
		set.add(1); 	// int -> Integer -> Object 
		set.add(3.14);	// double -> Double -> Object
		set.add("15");	// String -> Object
		System.out.println("set 객체가 비어있는가 ? : " + set.isEmpty());
		System.out.println("set 객체에 저장된 요소 갯수 : " + set.size());
		
		System.out.println("set 객체의 모든 요소 : " + set);
		System.out.println("실수 3.14 추가 가능한가 ? : " + set.add(3.14));
		// 중복 값이므로 불가능, false 리턴, 저장 X
		
		System.out.println("문자 '4' 추가 가능한가 ? : " + set.add('4'));
		System.out.println("set 객체의 모든 요소 : " + set);

		set.add(5);
		set.add('육');
		System.out.println("set 객체의 모든 요소 : " + set);
		System.out.println("------------------------------------------");
		
		// .contains(Object o) : boolean
		// => 객체 내에 요소 중 o를 갖는 가 판별
		System.out.println("실수 3.14를 포함하는 가 ? : " + set.contains(3.14));
		
		// .remove(Object o) : boolean
		// => 객체 내의 o 요소 제거
		System.out.println("3.14 제거 : " + set.remove(3.14));
		System.out.println("set 객체의 모든 요소 : " + set);
		System.out.println("3.14 제거 : " + set.remove(3.14)); // 요소가 존재하지 않음 : false
		
		// .clear : void
		// => 객체 요소 초기화
//		set.clear();
		System.out.println("set 객체의 모든 요소 : " + set);
		
		// .toArray() 
		// => 컬렉션을 배열로 변환
		Object[] oArr = set.toArray();
		for(Object arr : oArr) {
			System.out.print(arr + " ");
		}
		System.out.println(Arrays.toString(oArr));
		System.out.println("=======================================");
		
		// Set 또는 List 계열 생성 시 기존 객체 데이터 복사 가능
		Set<Object> set2 = new HashSet<Object>(set);
		set2.remove(5);
		System.out.println("set : " +set);
		System.out.println("set2 : " +set2);
		
		Set set3 = new HashSet();
		set3.add(10);
		set3.add(5);
		System.out.println("set3 : " + set3);
		
		// .addAll(Collection c)
		// => 중복 객체 제외 합치기
		set3.addAll(set);
	}

}
