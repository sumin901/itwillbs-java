package enum_type;

public class Ex {

	public static void main(String[] args) {
		/*
		 * 
		 * 상수를 사용해 한정된 데이터를 관리하는 경우
		 * 간편한 선언을 통해 관리할 수 있다는 장점
		 * 
		 * 해당 값의 범위를 벗어나는 값을 사용할 경우 
		 * 컴파일 시점에서 오류 발견 불가능
		 * 추가적인 작업을 통해 범위 내의 값인지 판별하는 작업이 별도로 필요하다
		 * => 이를 해결하기 위해 열거형(enum type) 필요
		 * 
		 * 열거형(Enumeration Type = Enum 타입)
		 * 
		 * - 상수를 좀 더 확실한 형태로 다루기 위한 객체의 일종
		 * - 데이터 타입이 일치하면 다른 데이터라도 사용 가능한 상수의 단점을 해결한다
		 * - enum 타입은 내부적으로 java.lang.Enum 클래스를 상속받는다
		 * 
		 * 					<열거타입 정의 방법>
		 * [접근제한자] enum 열거타입명 {
		 * 			// 열거타입에 사용할 값(상수)을 차례대로 나열
		 * 				상수1, 상수2, 상수3, ... ,
		 * 		}
		 * 
		 * - 기본적으로 클래스, 인터페이스 정의 문법과 유사하다
		 *   단, 열거타입 중괄호 내에는 상수로 사용될 이름만 지정한다
		 * 
		 * 					<열거타입 사용 방법>
		 * 1. 열거타입 변수 선언 방법(클래스,인터페이스와 동일하다)
		 *    열거타입명 변수명
		 *    ex_ Month month, EnumWeek today
		 *    
		 * 2. 열거타입 비교 방법
		 * - if문 사용 시 동등비교 연산자 사용(==)
		 * - switch문 사용 가능 (단, case문에서 열거타입명 없이 상수만 지정 필수적이다!)
		 * 	 switch(열거타입변수) {
		 * 		case 열거타입상수1 : 코드블럭
		 * 		case 열거타입상수2 : 코드블럭
		 * 		case 열거타입상수3 : 코드블럭
		 * 		case 열거타입상수4 : 코드블럭
		 * 		case 열거타입상수5 : 코드블럭
		 * 				...
		 * 
		 * }
		 * 
		 * 
		 * 
		 * 
		 */
		Week week = new Week();
		// setter 메서드 호출해 파라미터로 요일 전달 시 정확한 정수값을 몰라도
		// 상수 호출만으로 해당 정수 사용 및 전달 가능
		week.setMyWeek(Week.WEEK_WEDDAY);
		
		// 요일 정보를 상수로 관리하는 경우의 문제점
		// => 상수 데이터들이 정수일 경우 해당 정수를 전달받는 메서드(setter) 호출 시
		//    상수 범위 값이 아닌 다른 값을 전달해도 컴파일에러(문법적 오류)가 발생하지 않는다
		week.setMyWeek(10);
		// int 타입 파라미터이므로 컴파일 시점에서는 문제가 없지만
		// 해당 데이터를 사용하기 위한 시점에서는 문제가 발생할 수 있다.
		// 따라서 별도로 해당 범위 내의 데이터인지 판별하는 추가 작업을 수행해야한다
		
		System.out.println("=============================================");
		
		
	}

}

// 요일 정보를 관리하는 클래스 정의
// 열거타입을 사용하지 않고, 상수만 사용하는 경우
// 요일은 7가지로 정해져 있기에 상수 처리 가능하다
class Week {
	// 요일 정보를 상수로 관리
	// 외부에서 실제 데이터를 정확하게 알지 못해도 상수명(변수명)만으로 값을 사용 가능하다
	// 클래스명만으로 사용이 가능해 접근이 쉽다
	// 값 변경이 불가능하므로 안전하다
	public static final int WEEK_MONDAY = 0;
	public static final int WEEK_TUEDAY = 1;
	public static final int WEEK_WEDDAY = 2;
	public static final int WEEK_THUDAY = 3;
	public static final int WEEK_FRIDAY = 4;
	public static final int WEEK_SATDAY = 5;
	public static final int WEEK_SUNDAY = 6;
	
	private int myWeek;

	public int getMyWeek() {
		return myWeek;
	}

	public void setMyWeek(int myWeek) {
//		this.myWeek = myWeek;
		// 요일에 대한 정상 범위 판별 없이 저장 작업을 수행하는 경우
		// 실제 저장된 요일을 꺼내 사용하는 시점에선느 문제가 발생할 수 있다.
		// 따라서 정상 범위 판별하는 조건문이 필요하다
		if (myWeek >= WEEK_MONDAY && myWeek <= WEEK_SUNDAY) {
			this.myWeek = myWeek;
		} else {
			System.out.println("요일 입력 에러");
		}
	}
	
	
}

// 열거타입 정의
enum EnumWeek {
	// 열거형 정의 시 중괄호 내부에는 값을 갖는 상수 이름만 나열한다
	// 별도의 값을 지정하지 않아도 된다
}

