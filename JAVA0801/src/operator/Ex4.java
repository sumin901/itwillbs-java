package operator;

public class Ex4 {

	public static void main(String[] args) {
		/*
		 * 대입 연산자 (=)
		 * - 우변의 데이터를 좌변의 변수에 대입(저장)한다.
		 *   >> 연산의 방향이 오른쪽>>왼쪽이다.
		 *   ex) x= y = 3 >> y에 3을 대입
		 *   			  >> x에 y를 대입
		 *   
		 * - 연산자 중에서 우선 순위가 가장 낮다.
		 *   >> 다른 모든 작업을 수행한 뒤 대입 연산을 수행한다.
		 *   
		 * 확장(복합) 대입연산자 (+=, -=, *=, /=, %=)
		 * - 대입 연산자와 산술 연산자를 조합한 연산자
		 * - 좌변과 우변의 데이터끼리 산술연산을 먼저 수행하고
		 *   그 결과 값을 다시 좌변의 변수에 대입(저장)
		 *   >> a = a + b; >> a += b;
		 * 
		 */
		int a = 16; // 우변의 16을 좌변 a에 대입한다.
		int b;
		b = a; // a(16)을 좌변의 변수 b에 대입(저장)한다.
		
		// b와 a의 덧셈 결과를 다시 변수 b에 대입(저장)하라.
		// = b에 a 값을 누적한다.
		b = b + a; // b += a; 16 + 16 = 32가 변수 b에 저장된다. 
		
		// b와 a의 뺄셈 결과를 다시 변수 b에 저장하라.
		b = b - a; // => b -= a 
		
		// b와 a의 곱셉 결과를 다시 변수 b에 저장하라.
		b = b * a; // => b *= a
		
		// b와 a의 나눗셈 결과(몫)를 다시 변수 b에 저장하라.
		b = b / a; // => b /= a
		
		// b와 a의 나눗셈 결과(나머지)를 다시 변수 b에 저장하라.
		b = b % a; // => b %= a
		
		byte b1 = 10;
		// b1과 정수 10을 더한 값을 다시 b1에 저장하라.
//		b1 = b1 + 10; >> 오류, byte + int = int
//		=> 결과 값을 다시 byte 타입으로 변환해야 한다.
		b1 = (byte)(b1+10);
		b1 += 10; // 확장 대입 연산자를 사용 시, 형변환의 필요성이 사라진다.
		
		// char 타입 변수 값을 변환 시킬 때 확장 대입 연산자를 많이 사용한다.
		char ch = 'A';
//		ch = ch + 3; >> 타입 변환 오류
		// 해결 방법 2가지.
		// 1. ch = (char)(ch+3);	: 강제 형변환
		// 2. ch += 3;				: 확장 대입 연산자 사용
		b1 += 10;
		
		

	}

}
